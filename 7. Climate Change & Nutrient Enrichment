import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# System of ODEs
def model(y, t, ic, bc, dc, im, bm, g, r, k, f, gamma, alpha, N, delta, ac, ti, tc, eta, T, beta, sigma):
    C, M, H, Z = y
    S = 1 - C - M
    I = beta * (f/(H + 0.01))
    dCdt = (ic + (bc-ac-tc)*C) * S * (1 - alpha*M) * (1 + gamma * (Z - 1)) - (dc + eta*T*(1+eta/C)) * C - f*C*I
    dMdt = (im + bm * M * (1 + N)) * S - g * H * M
    dHdt = r * H * (1 - H) - f * H * (1 + I)
    dZdt = k * Z * (1 - Z) * C - delta * N * Z - sigma*ti*Z
    return [dCdt, dMdt, dHdt, dZdt]

# Initial conditions
C0 = 0.8
M0 = 0.05
H0 = 1
Z0 = 0.8
y0 = [C0, M0, H0, Z0]

# Parameter values
ic = 0.05       # import external coral
im = 0.05       # import external macroalgae
bc = 0.3        # growth rate coral
dc = 0.1        # death rate coral
bm = 0.8        # growth rate macroalgae
g = 1           # grazing
r = 1           # growth rate herbivores

alpha = 0.5     # Competition effect 
beta = 0        # Fishing intensity feedback 
gamma = 0.3     # Effect of zooxanthellae on coral 
delta = 0.05    # Effect of nutrients on zooxanthellae 
eta = 0         # Effect of toxic substances on coral mortality 
sigma = 0.1     # Effect of temperature on zooxanthellae 
ac = 0.05       # Effect of acidification on coral 
k = 0.5         # growth rate zooxanthellae 
N = 0.5         # Nutrients 
T = 0           # Toxicants 
tc = 0          # Effect of toxicants on coral growth 
ti = 0.5        # Temperature increase 


# Time points
t = np.linspace(0, 1000, 10000)

# Solve the ODEs for a fishery value
f_normal = 0.7
sol_normal = odeint(model, y0, t, args=(ic, bc, dc, im, bm, g, r, k, f_normal, gamma, alpha, N, delta, ac, ti, tc, eta, T, beta, sigma))
C_final, M_final, H_final, Z_final = sol_normal[-1]

# Use final values as initial conditions for reversed fishery values
C0_reversed = C_final
M0_reversed = M_final
H0_reversed = H_final
Z0_reversed = Z_final

# Fishery values
f_values_normal = np.linspace(0, 1, 100)
f_values_reversed = np.linspace(0.95, 0, 100)  # Reversed fisheries axis

# Solve the ODEs for each fishery value
C_values_normal = []
M_values_normal = []
H_values_normal = []
Z_values_normal = []
C_values_reversed = []
M_values_reversed = []
H_values_reversed = []
Z_values_reversed = []

for f in f_values_normal:
    sol = odeint(model, y0, t, args=(ic, bc, dc, im, bm, g, r, k, f, gamma, alpha, N, delta, ac, ti, tc, eta, T, beta, sigma))
    C_values_normal.append(sol[-1, 0])
    M_values_normal.append(sol[-1, 1])
    H_values_normal.append(sol[-1, 2])
    Z_values_normal.append(sol[-1, 3])

for f in f_values_reversed:
    sol = odeint(model, [C0_reversed, M0_reversed, H0_reversed, Z0_reversed], t, args=(ic, bc, dc, im, bm, g, r, k, f, gamma, alpha, N, delta, ac, ti, tc, eta, T, beta, sigma))
    C_values_reversed.append(sol[-1, 0])
    M_values_reversed.append(sol[-1, 1])
    H_values_reversed.append(sol[-1, 2])
    Z_values_reversed.append(sol[-1, 3])

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(f_values_normal, C_values_normal, label='Coral (C)', color='darkblue', linewidth=2)
plt.plot(f_values_normal, M_values_normal, label='Macroalgae (M)', color='goldenrod', linewidth=2)
plt.plot(f_values_normal, H_values_normal, label='Herbivores (H)', color='lightseagreen', linewidth=2)
plt.plot(f_values_normal, Z_values_normal, label='Zooxanthellae (Z)', color='tomato', linewidth=2)
plt.plot(f_values_reversed, C_values_reversed, linestyle='--', color='darkblue', linewidth=2)
plt.plot(f_values_reversed, M_values_reversed, linestyle='--', color='goldenrod', linewidth=2)
plt.plot(f_values_reversed, H_values_reversed, linestyle='--', color='lightseagreen', linewidth=2)
plt.plot(f_values_reversed, Z_values_reversed, linestyle='--', color='tomato', linewidth=2)
plt.xlabel('Fishing (f)', fontsize=14)
plt.ylabel('Stable State Cover / Abundance', fontsize=14)
plt.title('Climate Change & Nutrient Enrichment', fontsize=16, fontweight='bold')
plt.legend(fontsize=12)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(0.1)) 
plt.gca().xaxis.set_minor_locator(ticker.MultipleLocator(0.05)) 
plt.gca().yaxis.set_major_locator(ticker.MultipleLocator(0.1))
plt.gca().yaxis.set_minor_locator(ticker.MultipleLocator(0.05))
plt.show()
