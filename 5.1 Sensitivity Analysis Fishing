#Change all PARAMETER to to parameter you want to perform the sensitivity analysis for
#Change LOWER BOUND, UPPER BOUND and STEPS to desired values

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# System of ODEs
def model(y, t, ic, bc, dc, im, bm, g, r, f, alpha, beta):
    C, M, H = y
    S = 1 - C - M
    I = beta * (f / (H + 0.01))
    dCdt = (ic + bc * C) * S * (1-alpha*M) - dc * C - f*C*I
    dMdt = (im + bm * M) * S - g * H * M
    dHdt = r * H * (1 - H) - f * H * (1 + I)
    return [dCdt, dMdt, dHdt]

# Initial conditions
C0 = 0.8
M0 = 0.05
H0 = 1
y0 = [C0, M0, H0]

# Parameter values
ic = 0.05       # import external coral
im = 0.05       # import external macroalgae
bc = 0.3        # growth rate coral
dc = 0.1        # death rate coral
bm = 0.8        # growth rate macroalgae
g = 1           # grazing
r = 1           # growth rate herbivores

beta = 0.01    
alpha = 0.5

# Range of PARAMETER values for sensitivity analysis
PARAMETER_values = np.linspace(LOWER BOUND, UPPER BOUND, STEPS)

# Time points
t = np.linspace(0, 1000, 10000)

# Colors
colors = plt.cm.viridis(np.linspace(0, 1, len(PARAMETER_values)))

# Solve the ODEs for each value
plt.figure(figsize=(10, 6))
for PARAMETER, color in zip(PARAMETER_values, colors):
    # Solve the ODEs for f=0.7 to obtain final values
    f_normal = 0.4
    sol_normal = odeint(model, y0, t, args=(ic, bc, dc, im, bm, g, r, f_normal, alpha, beta))
    C_final, M_final, H_final = sol_normal[-1]

    # Use final values as initial conditions for reversed fishing values
    y0_reversed = [C_final, M_final, H_final]

    # Fishery values
    f_values_normal = np.linspace(0, 1, 100)
    f_values_reversed = np.linspace(1, 0, 100)  # Reversed fisheries axis

    # Solve the ODEs for each fishery value
    C_values_normal = []
    C_values_reversed = []

    for f in f_values_normal:
        sol = odeint(model, y0, t, args=(ic, bc, dc, im, bm, g, r, f, alpha, beta))
        C_values_normal.append(sol[-1, 0])

    for f in f_values_reversed:
        sol = odeint(model, y0_reversed, t, args=(ic, bc, dc, im, bm, g, r, f, alpha, beta))
        C_values_reversed.append(sol[-1, 0])

    # Plot the results
    plt.plot(f_values_normal, C_values_normal, label=f'PARAMETER = {PARAMETER:.2f}', color=color, linewidth=2)
    plt.plot(f_values_reversed, C_values_reversed, linestyle='--', color=color, linewidth=2)

plt.xlabel('Fishing (f)', fontsize=14)
plt.ylabel('Coral Stable State Cover', fontsize=14)
plt.title('Sensitivity of Coral Cover to PARAMETER', fontsize=16, fontweight='bold')
plt.legend(fontsize=12)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(0.1)) 
plt.gca().xaxis.set_minor_locator(ticker.MultipleLocator(0.05)) 
plt.gca().yaxis.set_major_locator(ticker.MultipleLocator(0.1))  
plt.gca().yaxis.set_minor_locator(ticker.MultipleLocator(0.05)) 
plt.show()
