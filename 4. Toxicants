import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# System of ODEs
def model(y, t, ic, bc, dc, im, bm, g, r, f, tc, eta, T):
    C, M, H = y
    S = 1 - C - M
    dCdt = (ic + (bc-tc) * C) * S - (dc + eta*T*(1 + eta/C)) * C
    dMdt = (im + bm * M) * S - g * H * M
    dHdt = r * H * (1 - H) - f * H
    return [dCdt, dMdt, dHdt]

# Initial conditions
C0 = 0.8
M0 = 0.05
H0 = 1
y0 = [C0, M0, H0]

# Parameter values
ic = 0.05       # import external coral
im = 0.05       # import external macroalgae
bc = 0.3        # growth rate coral
dc = 0.1        # death rate coral
bm = 0.8        # growth rate macroalgae
g = 1           # grazing
r = 1           # growth rate herbivores
 
tc = 0.05       # effect of toxic substances on coral growth
T = 0.5         # Toxicants
eta = 0.05      # effect of toxicants on coral mortality

# Time points
t = np.linspace(0, 1000, 10000)

# Solve the ODEs for a fishery value
f_normal = 0.5
sol_normal = odeint(model, y0, t, args=(ic, bc, dc, im, bm, g, r, f_normal, tc, eta, T))
C_final, M_final, H_final, = sol_normal[-1]

# Use final values as initial conditions for reversed
C0_reversed = C_final
M0_reversed = M_final
H0_reversed = H_final

# Fishery values
f_values_normal = np.linspace(0, 1, 100)
f_values_reversed = np.linspace(1, 0, 100)

# Solve the ODEs for each fishery value
C_values_normal = []
M_values_normal = []
H_values_normal = []
C_values_reversed = []
M_values_reversed = []
H_values_reversed = []

for f in f_values_normal:
    sol = odeint(model, y0, t, args=(ic, bc, dc, im, bm, g, r, f, tc, eta, T))
    C_values_normal.append(sol[-1, 0])
    M_values_normal.append(sol[-1, 1])
    H_values_normal.append(sol[-1, 2])

for f in f_values_reversed:
    sol = odeint(model, [C0_reversed, M0_reversed, H0_reversed], t, args=(ic, bc, dc, im, bm, g, r, f, tc, eta, T))
    C_values_reversed.append(sol[-1, 0])
    M_values_reversed.append(sol[-1, 1])
    H_values_reversed.append(sol[-1, 2])

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(f_values_normal, C_values_normal, label='Coral (C)', color='darkblue', linewidth=2)
plt.plot(f_values_normal, M_values_normal, label='Macroalgae (M)', color='goldenrod', linewidth=2)
plt.plot(f_values_normal, H_values_normal, label='Herbivores (H)', color='lightseagreen', linewidth=2)
plt.plot(f_values_reversed, C_values_reversed, linestyle='--', color='darkblue', linewidth=2)
plt.plot(f_values_reversed, M_values_reversed, linestyle='--', color='goldenrod', linewidth=2)
plt.plot(f_values_reversed, H_values_reversed, linestyle='--', color='lightseagreen', linewidth=2)
plt.xlabel('Fishing (f)', fontsize=14)
plt.ylabel('Stable State Cover / Abundance', fontsize=14)
plt.title('Pollution Toxic Substances', fontsize=16, fontweight='bold')
plt.legend(fontsize=12)
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(0.1)) 
plt.gca().xaxis.set_minor_locator(ticker.MultipleLocator(0.05)) 
plt.gca().yaxis.set_major_locator(ticker.MultipleLocator(0.1))
plt.gca().yaxis.set_minor_locator(ticker.MultipleLocator(0.05))
plt.show()
